generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    habits        Habit[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Habit {
    id            String         @id @default(uuid())
    name          String
    description   String?
    frequency     HabitFrequency
    quantity      Int
    userId        String // Foreign key to relate Habit to User
    habitCategory HabitCategory // Habit category as an enum
    createdAt     DateTime       @default(now())
    updatedAt     DateTime?

    user      User       @relation(fields: [userId], references: [id])
    habitLogs HabitLog[]
}

model HabitLog {
    id      String   @id @default(uuid())
    habitId String // Foreign key to relate HabitLog to Habit
    date    DateTime
    // Include any other relevant fields

    habit Habit @relation(fields: [habitId], references: [id], onDelete: Cascade)
}

enum HabitCategory {
    LIFESTYLE
    HEALTH
    PERSONAL_GROWTH
    WORK
    EDUCATION
    HOBBIES
    FAMILY
}

enum HabitFrequency {
    DAILY
    WEEKLY
    MONTHLY
    YEARLY
}
